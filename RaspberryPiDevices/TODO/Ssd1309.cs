
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.ComponentModel;
using System.Device.Gpio;
using System.Device.Spi;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Threading.Tasks.Dataflow;
using System.Xml;
using System.Xml.Serialization;

using Iot.Device.Board;
using Iot.Device.Graphics;
using Iot.Device.Graphics.SkiaSharpAdapter;
using Iot.Device.Pcx857x;
using Iot.Device.Ssd13xx;
using Iot.Device.Ssd13xx.Commands;
using Iot.Device.Tca954x;

using SkiaSharp;

using UnitsNet;
using UnitsNet.Units;

using static RaspberryPiDevices.Regression;

namespace RaspberryPiDevices;

/// <summary>
/// https://www.amazon.com/dp/B0CM3RHMGP?ref=ppx_yo2ov_dt_b_product_details&th=1
/// https://www.waveshare.com/wiki/2.42inch_OLED_Module
/// https://files.waveshare.com/wiki/2.42inch-OLED-Module/SSD1309Datasheet.pdf
/// 
/// Overview
/// This is 2.42inch OLED Display Module 28×64 Resolution with an embedded SSD1309 driver chip and supports SPI/I2C communication, White Display Color. We also provide the demo codes for Raspberry Pi Pico, Arduino, STM32, ESP32, and Jetson Nano.
/// 
/// Specifications
/// OPERATING VOLTAGE: 3.3V / 5V
/// COMMUNICATION INTERFACE: 4-wire SPI (default) / I2C
/// DRIVER CHIP: SSD1309
/// RESOLUTION: 128 × 64 pixels
/// DISPLAY COLOR: WHITE
/// DISPLAY SIZE: 55.01 × 27.49mm
/// PIXEL SIZE: 0.4 × 0.4mm
/// MODULE SIZE: 61.50 × 39.50mm
/// Hardware Configuration
/// OLED module provides two kinds of driver interfaces: 4-wire SPI and I2C interfaces respectively. There are two optional soldering resistors on the back of the module at the lower left corner, through the choice of resistors to select the corresponding communication mode. The module adopts a 4-wire SPI communication mode by default, that is, the resistor is connected to the SPI by default. The specific hardware configuration is as follows:
/// 
/// 4-wire SPI:
/// That is the factory demo setting: two 0R resistors are connected to the SPI position; DIN connects to the host MOSI and CLK connects to the host SCLK.
/// 
/// I2C:
/// Two 0R resistors are connected to the I2C position; DIN connects to the host SDA and CLK connects to the host SCL.
/// The DC pin can be used to change the I2C Address: Set Low, the I2C Address is :0x3C; Set High, the I2C Address is 0x3D.
/// 
/// Note: The demo is set as SPI mode by default, if you need to switch the mode, please modify the DEV_Config.h. See demo description - underlying hardware interface - interface selection for more details.
/// 
/// Package Content
/// 2.42inch OLED Module x1
/// GH1.25 7PIN cable x1
/// 
/// Online Development Resources /User Manual ://bit.ly/45LKn4c
/// </summary>
public sealed class Ssd1309 : IDisposable
{

    public static class ControlPinInterface
    {
        public enum Operation
        {
            ReadWrite,
            ChipSelect,
            Data
        }

        /*[MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]*/
        public static PinValue WriteCommand(Operation op)
        {
            switch (op)
            {
                case Operation.ReadWrite:
                case Operation.ChipSelect:
                case Operation.Data:
                default:
                {
                    return PinValue.Low;
                }
            }
        }
        /*[MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]*/
        public static PinValue ReadStatus(Operation op)
        {
            switch (op)
            {
                case Operation.ReadWrite:
                {
                    return PinValue.High;
                }
                case Operation.ChipSelect:
                case Operation.Data:
                default:
                {
                    return PinValue.Low;
                }
            }
        }
        /*[MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]*/
        public static PinValue WriteData(Operation op)
        {
            switch (op)
            {
                case Operation.Data:
                {
                    return PinValue.High;
                }
                case Operation.ReadWrite:
                case Operation.ChipSelect:
                default:
                {
                    return PinValue.Low;
                }
            }
        }
        /*[MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]*/
        public static PinValue ReadData(Operation op)
        {
            switch (op)
            {
                case Operation.ReadWrite:
                case Operation.Data:
                {
                    return PinValue.High;
                }
                case Operation.ChipSelect:
                default:
                {
                    return PinValue.Low;
                }
            }
        }
    }




    public Func<bool, byte> EntireDisplayOn = (bool resume) =>
    {
        if (resume)
        {
            return 0b10100100;
        }
        return 0b1010_0101;
    };

    public static class Command
    {
        //0 81
        //10000001
        //0 A4/A5
        //1010010X0
        //0 A6/A7
        //0b1010011X0
        //0 AE/AF
        //0b1010111X0
        //0 E3
        //0b11100011
        //0 FD
        //0b11111101
        //0 A[2]
        //0b00010A210

        public const byte ContrastControl = 0b1000_0001;

        public const byte EntireDisplayOnResume = 0b10100100;
        public const byte EntireDisplayOn = 0b1010_0101;

        public const byte NormalDisplay = 0b1010_1110;
        public const byte InverseDisplay = 0b1010_1111;

        public const byte DisplayOff = 0b1010_1110;
        public const byte DisplayOn = 0b1010_1111;

        public const byte NOP = 0b11100011;
        public const byte SetCommandLock = 0b11111101;

        public const byte WriteRam = 0x5C;
        public const byte ReadRam = 0x5D; // Note that this is not used with an SPI interface as the SSD1351 cannot be read,

        //SetRemap = 0xA0,
        //SetStartLine = 0xA1,
        //SetDisplayOffset = 0xA2,

        //SelectFunction = 0xAB,

        //SetDisplayOff = 0xAE,
        //SetDisplayOn = 0xAF,

        //SetColumn = 0x15,
        //SetRow = 0x75,
        //SetHorizontalScroll = 0x96,
        //StopScroll = 0x9E,
        //StartScroll = 0x9F,

        //SetDisplayAllOff = 0xA4,
        //SetDisplayAllOn = 0xA5,
        //SetNormalDisplay = 0xA6,
        //SetInvertedDisplay = 0xA7,

        //SetPrecharge = 0xB1,
        //SetDisplayEnhancement = 0xB2,
        //SetClockDiv = 0xB3,
        //SetVSL = 0xB4,
        //SetGPIO = 0xB5,
        //SetPrecharge2 = 0xB6,
        //SetGrayLevels = 0xB8,
        //SetDefaultGrayLevels = 0xB9,
        //SetPrechargeVoltageLevel = 0xBB,
        //SetDeselectVoltageLevel = 0xBE,
        //SetContrastABC = 0xC1,
        //SetContrastMasterCurrent = 0xC7,
        //SetMultiplexorRatio = 0xCA,
        //SetCommandLocks = 0xFD
    }

    public enum ScrollingCommand : byte
    {
        //ContinuousHorizontalScrollSetup =



    }

    #region Enums

    /// <summary>
    /// Gpio mode
    /// </summary>
    public enum GpioMode
    {
        /// <summary>Disabled</summary>
        Disabled = 0x00,

        /// <summary>Input enabled</summary>
        InputEnabled = 0x01,

        /// <summary>Output low</summary>
        OutputLow = 0x10,

        /// <summary>Output high</summary>
        OutputHigh = 0x11
    }

    /// <summary>
    /// Color depth
    /// </summary>
    public enum ColorDepth
    {
        /// <summary>Color depth: 256</summary>
        ColourDepth256 = 0x00,

        /// <summary>Color depth: 65k</summary>
        ColourDepth65K = 0x01,

        /// <summary>Color depth: 262k</summary>
        ColourDepth262K = 0x02,

        /// <summary>Color depth: 262k 16-bit</summary>
        ColourDepth262K16Bit = 0x03
    }

    /// <summary>
    /// Common split
    /// </summary>
    public enum CommonSplit
    {
        /// <summary>None</summary>
        None = 0x00,

        /// <summary>Parity split (odd and even numbers)</summary>
        OddEven = 0x01
    }

    /// <summary>
    /// SEG0 common
    /// </summary>
    public enum Seg0Common
    {
        /// <summary>Column 0</summary>
        Column0 = 0x00,

        /// <summary>Column 127</summary>
        Column127 = 0x01
    }

    /// <summary>
    /// Color sequence
    /// </summary>
    public enum ColorSequence
    {
        /// <summary>BGR (blue, green, red)</summary>
        BGR = 0x00,

        /// <summary>RGB (red, green, blue)</summary>
        RGB = 0x01
    }

    /// <summary>
    /// High voltage level (VCOMH) of common pins relative to VCC
    /// </summary>
    public enum VComHDeselectLevel
    {
        /// <summary>0.72 of VCC level</summary>
        VccX072 = 0x00,

        /// <summary>0.74 of VCC level</summary>
        VccX074 = 0x01,

        /// <summary>0.76 of VCC level</summary>
        VccX076 = 0x02,

        /// <summary>0.78 of VCC level</summary>
        VccX078 = 0x03,

        /// <summary>0.80 of VCC level</summary>
        VccX080 = 0x04,

        /// <summary>0.82 of VCC level</summary>
        VccX082 = 0x05,

        /// <summary>0.84 of VCC level</summary>
        VccX084 = 0x06,

        /// <summary>0.86 of VCC level</summary>
        VccX086 = 0x07
    }

    /// <summary>
    /// Source of VDD
    /// </summary>
    public enum VDDSource
    {
        /// <summary>External VDD source</summary>
        External = 0x00,

        /// <summary>Internal VDD source</summary>
        Internal = 0x01
    }

    /// <summary>
    /// Horizontal scroll direction
    /// </summary>
    public enum ScrollDirection : byte
    {
        /// <summary>No scroll</summary>
        NoScroll = 0x00,

        /// <summary>Scroll to segment 127</summary>
        Scroll2Seg127 = 0x01,

        /// <summary>Scroll to segment 0</summary>
        Scroll2Seg0 = 0x40
    }

    /// <summary>
    /// Horizontal scroll speed
    /// </summary>
    public enum ScrollSpeed : byte
    {
        /// <summary>Normal speed</summary>
        Normal = 0x01,

        /// <summary>Slow speed</summary>
        Slow = 0x02,

        /// <summary>Slowest speed</summary>
        Slowest = 0x03
    }





    #endregion



    public const int SIZE = 16;

    public const int Brightness = 0xFF;

    public const int ScreenWidth = 128;
    public const int ScreenHeight = 64;

    public const int SCLK_PIN = 11;
    public const int MOSI_PIN = 10;
    public const int RST_PIN = 17;
    public const int DC_PIN = 27;
    public const int CS_PIN = 22;

    private byte[] gui_disp_buf = new byte[ScreenWidth * ScreenHeight / 8]{
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0xE0,0xC0,0xC0,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,
0x0C,0xFE,0xFE,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x80,0x80,0x80,0x80,0x80,0x80,0xC0,0xC0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x60,0x70,0x70,0x70,0x60,0xC0,0x80,0x80,0xE0,0x80,0x00,0x00,0x00,
0x00,0x80,0x00,0x00,0x80,0x80,0xF0,0x3F,0x0F,0x0F,0x03,0x01,0x00,0x00,0x00,0xC0,
0xE0,0xE0,0xE0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x0F,0x1F,0x3F,0x1F,0x1E,0x1E,0x1E,
0xFE,0xFF,0xFF,0x3E,0x3C,0x3C,0x3C,0xFE,0xFE,0xFF,0x10,0x00,0x00,0x00,0x00,0xC2,
0x01,0x01,0x01,0x01,0x01,0x03,0x03,0x03,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x81,0x0F,0x07,0x07,0x00,0x00,0x00,
0x00,0x07,0x03,0x01,0x01,0x81,0x01,0x20,0x20,0x20,0xC0,0xC0,0xC0,0x80,0x00,0x00,
0x01,0x07,0x3F,0xFF,0xFC,0xF8,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,
0xFF,0x7F,0x0F,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xF0,0xC0,0x00,0x00,0x00,0x07,
0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1C,0x1F,0x03,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x02,0x07,0x07,0x07,0x07,0x0F,0x0F,0x0E,0x00,0x00,0x00,0x00,
0x78,0x78,0x00,0x00,0x00,0x01,0x00,0x10,0x70,0xF0,0xFF,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0xF8,0xFF,0x7F,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
0x01,0x00,0x00,0x00,0x00,0xE0,0xF0,0x7F,0x7F,0x7F,0x7F,0x3F,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x18,0x38,0xF8,0xF8,0x78,0x38,0x0C,0x04,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x10,0x20,0xE0,0xE0,0xE0,0xE0,0xE0,0xC0,0x00,0x01,0x03,
0x03,0x07,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

    private bool disposedValue;
    private readonly GpioController _gpioController;
    private readonly SpiDevice _spiDevice;

    private readonly OLEDDisplay _oLEDDisplay;

    private BitmapImage _bitmapImage;// = BitmapImage.CreateBitmap(Ssd1306Width, Ssd1306Height, PixelFormat.Format32bppArgb);

    public IGraphics GraphicsApi
    {
        get
        {
            return _bitmapImage.GetDrawingApi();
        }
    }

    private const int FONTSIZE = 12;
    private const string FONTFAMILYNAME = "Cascadia Code";

    private AsciiFont _asciiFont;
    private Paint _paint;

    public Ssd1309(RaspberryPiBoard raspberryPiBoard)
    {
        _oLEDDisplay = new OLEDDisplay(5, ScreenWidth, ScreenHeight);

        _bitmapImage = GetBackBufferCompatibleImage();

        _paint = new Paint(ScreenWidth, ScreenHeight);
        _asciiFont = new AsciiFont(AsciiFont.Size.Font12);

        _gpioController = raspberryPiBoard.CreateGpioController();

        //_gpioController.OpenPin(SCLK_PIN);
        //_gpioController.OpenPin(MOSI_PIN);
        _gpioController.OpenPin(RST_PIN);
        _gpioController.OpenPin(DC_PIN);
        _gpioController.OpenPin(CS_PIN);

        SpiConnectionSettings connectionSettings = new SpiConnectionSettings(0, 0)
        {
            //BusId,
            //ChipSelectLine,
            ClockFrequency = 10_000_000,
            Mode = SpiMode.Mode0,
            DataBitLength = 8,
            DataFlow = DataFlow.MsbFirst,
            ChipSelectLineActiveState = PinValue.Low
        };

        _spiDevice = raspberryPiBoard.CreateSpiDevice(connectionSettings);

        //Hardware reset
        Reset();

        //Set the initialization register
        Init();
        Utilities.DelayMilliseconds(200);

        //Turn on the OLED display
        WriteReg(Command.DisplayOn);

    }


    #region Dispose

    private void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                //managed
                Clear();

                _gpioController.ClosePin(SCLK_PIN);
                _gpioController.ClosePin(MOSI_PIN);
                _gpioController.ClosePin(RST_PIN);
                _gpioController.ClosePin(DC_PIN);
                _gpioController.ClosePin(CS_PIN);
            }

            //unmanaged
            disposedValue = true;
        }
    }

    ~Ssd1309()
    {
        Dispose(disposing: false);
    }

    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
    #endregion


    public BitmapImage GetBackBufferCompatibleImage()
    {
        return BitmapImage.CreateBitmap(ScreenWidth, ScreenHeight, PixelFormat.Format32bppXrgb);
    }

    private void SCLK_Set() => _gpioController.Write(SCLK_PIN, PinValue.High);
    private void SDIN_Set() => _gpioController.Write(MOSI_PIN, PinValue.High);
    private void RES_Set() => _gpioController.Write(RST_PIN, PinValue.High);
    private void DC_Set() => _gpioController.Write(DC_PIN, PinValue.High);
    private void CS_Set() => _gpioController.Write(CS_PIN, PinValue.High);
    private void SCLK_Reset() => _gpioController.Write(SCLK_PIN, PinValue.Low);
    private void SDIN_Reset() => _gpioController.Write(MOSI_PIN, PinValue.Low);
    private void RES_Reset() => _gpioController.Write(RST_PIN, PinValue.Low);
    private void DC_Reset() => _gpioController.Write(DC_PIN, PinValue.Low);
    private void CS_Reset() => _gpioController.Write(CS_PIN, PinValue.Low);


    private void SetPinLow(int pin)
    {
        _gpioController.Write(pin, PinValue.Low);
    }

    private void SetPinHigh(int pin)
    {
        _gpioController.Write(pin, PinValue.Low);
    }

    private void Reset()
    {
        SetPinHigh(RST_PIN);
        Utilities.DelayMilliseconds(100);
        SetPinLow(RST_PIN);
        Utilities.DelayMilliseconds(100);
        SetPinHigh(RST_PIN);
        Utilities.DelayMilliseconds(100);
    }

    private void WriteReg(byte Reg)
    {
        SetPinLow(DC_PIN);
        _spiDevice.WriteByte(Reg);
    }

    private void WriteData(byte Data)
    {
        SetPinHigh(DC_PIN);
        _spiDevice.WriteByte(Data);
    }

    private void Init()
    {
        WriteReg(0xAE);//--turn off oled panel

        WriteReg(0x00);//---set low column address
        WriteReg(0x10);//---set high column address

        WriteReg(0x20);
        WriteReg(0x00);

        WriteReg(0xFF);

        WriteReg(0xA6);

        WriteReg(0xA8);
        WriteReg(0x3F);

        WriteReg(0xD3);
        WriteReg(0x00);

        WriteReg(0xD5);
        WriteReg(0x80);

        WriteReg(0xD9);
        WriteReg(0x22);

        WriteReg(0xDA);
        WriteReg(0x12);

        WriteReg(0xDB);
        WriteReg(0x40);

    }

    private void Clear()
    {
        // Width = (1IN3_WIDTH % 8 == 0)? (1IN3_WIDTH / 8 ): (1IN3_WIDTH / 8 + 1);
        // Height = 1IN3_HEIGHT; 

        for (byte i = 0; i < 8; i++)
        {
            /* set page address */
            WriteReg((byte)(0xB0 + i));
            /* set low column address */
            WriteReg(0x00);
            /* set high column address */
            WriteReg(0x10);
            for (byte j = 0; j < 128; j++)
            {
                /* write data */
                WriteData(0x00);
            }

        }
    }


    public PixelFormat NativePixelFormat => PixelFormat.Format1bppBw;

    //public void Display(string text, int fontSize = FONTSIZE, string fontFamilyName = FONTFAMILYNAME)
    //{
    //    float width = _oLEDDisplay.MeasureText(text, out SKRect bounds);

    //    Console.WriteLine($"Display MeasureText width {width} bounds {bounds.Width} {bounds.Height}");

    //    _bitmapImage.Clear(Color.Black);

    //    GraphicsApi.DrawText(text, fontFamilyName, fontSize, Color.White, Point.Empty);

    //    _ssd1306.DrawBitmap(_ssd1306BitmapImage);
    //}

    //private void DrawBitmap(BitmapImage image)
    //{        

    //    int width = ScreenWidth;
    //    Int16 pages = 4;
    //    List<byte> buffer = new();

    //    for (int page = 0; page < pages; page++)
    //    {
    //        for (int x = 0; x < width; x++)
    //        {
    //            int bits = 0;
    //            for (byte bit = 0; bit < 8; bit++)
    //            {
    //                bits = bits << 1;
    //                bits |= image[x, page * 8 + 7 - bit].GetBrightness() > BrightnessThreshold ? 1 : 0;
    //            }

    //            buffer.Add((byte)bits);
    //        }
    //    }

    //    int chunk_size = 16;
    //    for (int i = 0; i < buffer.Count; i += chunk_size)
    //    {
    //        SendData(buffer.Skip(i).Take(chunk_size).ToArray());
    //    }
    //}

    public void DisplayAllPixelsOn()
    {
        for (int x = 0; x < _bitmapImage.Width; ++x)
        {
            for (int y = 0; y < _bitmapImage.Height; ++y)
            {
                _bitmapImage[x, y] = Color.White;
            }
        }
    }
    public void DisplayAllPixelsOff()
    {
        for (int x = 0; x < _bitmapImage.Width; ++x)
        {
            for (int y = 0; y < _bitmapImage.Height; ++y)
            {
                _bitmapImage[x, y] = Color.Black;
            }
        }
    }

    public void DisplayPixelOn(int x, int y)
    {
        _bitmapImage[x, y] = Color.White;
    }

    public void DisplayPixelOff(int x, int y)
    {
        _bitmapImage[x, y] = Color.Black;
    }

    public void DisplayBitmapImage()
    {
        Display(_bitmapImage.AsByteSpan());
    }

    private void Display(byte[] image_bytes)
    {
        Display(image_bytes.AsSpan());
    }

    private void Display(ReadOnlySpan<byte> image_bytes)
    {
        byte temp;

        for (byte page = 0; page < 8; page++)
        {
            /* set page address */
            WriteReg((byte)(0xB0 + page));
            /* set low column address */
            WriteReg(0x00);
            /* set high column address */
            WriteReg(0x10);

            /* write data */
            for (byte column = 0; column < 128; column++)
            {
                temp = image_bytes[(7 - page) + column * 8];
                WriteData(temp);
            }
        }
    }


    public void DisplayString(string toDisplay)
    {
        _paint.DrawString(0, 0, toDisplay.ToCharArray(), ref _asciiFont, Paint.WHITE, Paint.BLACK);
    }

    private int Test()
    {
        //Console.Write("2.42inch OLED test demo\n");

        //Console.Write("OLED Init...\r\n");
        //Init();
        ////DEV_Delay_ms(500);
        //Clear();
        //// 0.Create a new image cache
        //int Imagesize = ((ScreenWidth % 8 == 0) ? (ScreenWidth / 8) : (ScreenWidth / 8 + 1)) * ScreenHeight;
        //byte[] BlackImage = new byte[Imagesize];

        //Console.Write("Paint_NewImage\r\n");

        //Paint_NewImage(BlackImage, ScreenWidth, ScreenHeight, 270, BLACK);

        //// Paint_SetScale(16);
        //Console.Write("Drawing\r\n");

        ////1.Select Image
        //Paint_SelectImage(BlackImage);
        //DEV_Delay_ms(500);
        //Paint_Clear(BLACK);

        //// 2.Drawing on the image   
        //Console.Write("Drawing:page 1\r\n");
        //Paint_DrawPoint(20, 10, WHITE, DOT_PIXEL_1X1, DOT_STYLE_DFT);
        //Paint_DrawPoint(30, 10, WHITE, DOT_PIXEL_2X2, DOT_STYLE_DFT);
        //Paint_DrawPoint(40, 10, WHITE, DOT_PIXEL_3X3, DOT_STYLE_DFT);
        //Paint_DrawLine(10, 10, 10, 20, WHITE, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
        //Paint_DrawLine(20, 20, 20, 30, WHITE, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
        //Paint_DrawLine(30, 30, 30, 40, WHITE, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
        //Paint_DrawLine(40, 40, 40, 50, WHITE, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
        //Paint_DrawCircle(60, 30, 15, WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
        //Paint_DrawCircle(100, 40, 20, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
        //Paint_DrawRectangle(50, 30, 60, 40, WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
        //Paint_DrawRectangle(90, 30, 110, 50, BLACK, DOT_PIXEL_1X1, DRAW_FILL_FULL);
        //// 3.Show image on page1
        //OLED_2in42_Display(BlackImage);
        //DEV_Delay_ms(2000);
        //Paint_Clear(BLACK);

        //// Drawing on the image
        //Console.Write("Drawing:page 2\r\n");
        //Paint_DrawString_EN(10, 0, "waveshare", &Font16, WHITE, WHITE);
        //Paint_DrawString_EN(10, 17, "hello world", &Font8, WHITE, WHITE);
        //Paint_DrawNum(10, 30, 123.456789, &Font8, 4, WHITE, WHITE);
        //Paint_DrawNum(10, 43, 987654, &Font12, 5, WHITE, WHITE);
        //// Show image on page2
        //OLED_2in42_Display(BlackImage);
        //DEV_Delay_ms(2000);
        //Paint_Clear(BLACK);

        //// Drawing on the image
        //Console.Write("Drawing:page 3\r\n");
        //Paint_DrawString_CN(10, 0, "���Abc", &Font12CN, WHITE, WHITE);
        //Paint_DrawString_CN(0, 20, "΢ѩ����", &Font24CN, WHITE, WHITE);
        //// Show image on page3
        //OLED_2in42_Display(BlackImage);
        //DEV_Delay_ms(2000);
        //Paint_Clear(BLACK);

        //// Drawing on the image
        //Console.Write("Drawing:page 4\r\n");
        //GUI_ReadBmp("./pic/waveshare.bmp", 0, 0);
        //OLED_2in42_Display(BlackImage);
        //DEV_Delay_ms(2000);
        //Paint_Clear(BLACK);

        //OLED_2in42_Clear();

        return 0;
    }




    //public void WriteCommand(ReadOnlySpan<byte> commands)
    //{
    //    _spiDevice.Write(commands);
    //}

    //public void WriteCommand(byte command)
    //{
    //    DC_Reset();
    //    CS_Reset();
    //    _spiDevice.WriteByte(command);
    //    CS_Set();
    //    DC_Set();
    //}
    //public void WriteData(byte dat)
    //{
    //    DC_Set();
    //    CS_Reset();
    //    _spiDevice.WriteByte(dat);
    //    CS_Set();
    //    DC_Set();
    //}

    //// Set the position to write data in page addressing mode
    //// Page: 0-7
    //// Col : 0-127
    //public void Set_Pos(byte page, byte col)
    //{
    //    WriteCommand((byte)(0xb0 + (page & 0b111))); // Set pages, y from 0-7
    //    WriteCommand((byte)(((col & 0xf0) >> 4) | 0x10)); // Set high nibble for col addressing
    //    WriteCommand((byte)((col & 0x0f))); // Set low nibble for col addressing
    //}

    //private void Display_On()
    //{
    //    WriteCommand(0x8d); // Charge pump setting
    //    WriteCommand(0x14); // enable charge pump
    //    WriteCommand(0xaf); // display on
    //}

    //private void Display_Off()
    //{
    //    WriteCommand(0x8d); // Charge pump setting
    //    WriteCommand(0x10); // disable charge pump
    //    WriteCommand(0xae); // display off
    //}

    //public void Clear()
    //{
    //    for (byte i = 0; i < 8; i++)
    //    {
    //        Set_Pos(i, 0);
    //        for (byte n = 0; n < 128; n++)
    //        {
    //            WriteData(0x00);
    //        }
    //    }
    //}

    //public void DrawWindow()
    //{
    //    ushort j = 0;

    //    for (byte i = 0; i < 8; i++)  // 8 pages
    //    {
    //        // Refer to SSD1306 Section 10.1.3 for Page addressing mode referenceh
    //        WriteCommand((byte)(0xb0 + i));  // Set page address
    //        WriteCommand(0x00);      // Set lower 4 bit for Col address (0000[4:0])
    //        WriteCommand(0x10);      // Set higher 4 bit for Col address (0001[4:0])
    //                                 // Start col 0b0000 0000 = Seg 0

    //        for (byte n = 0; n < 128; n++)
    //        { // 128 byte for each row // each byte for each row
    //            WriteData(gui_disp_buf[j++]);
    //        }
    //        //Col pointer increase by 1 after writing to the particular GDDRAM
    //        //index j also increase by 1 from the settings
    //    }
    //}

    //public void ClearBuf()
    //{
    //    for (ushort i = 0; i < (X_WIDTH * Y_WIDTH / 8); i++)
    //    {
    //        gui_disp_buf[i] = 0x00;
    //    }
    //}

    //public void ClearPage(byte page)
    //{
    //    // Refer to SSD1306 Section 10.1.3 for Page addressing mode referenceh
    //    WriteCommand((byte)(0xb0 + page));  // Set page address
    //    WriteCommand(0x00);      // Set lower 4 bit for Col address (0000[4:0])
    //    WriteCommand(0x10);      // Set higher 4 bit for Col address (0001[4:0])
    //                             // Start col 0b0000 0000 = Seg 0

    //    for (byte n = 0; n < 128; n++)
    //    { // 128 byte for each row // each byte for each row
    //        WriteData(0);
    //    }
    //}

    //public void ShowChar_6x8(byte chr)
    //{
    //    for (byte i = 0; i < 6; i++)
    //    {
    //        WriteData(font6x8[chr][i]); // Offset from font to ascii table
    //    }
    //}



    //public void SetInverseDisplay()
    //{
    //    SendCommand(Command.InverseDisplay);
    //}

    //private void SendCommand(Command command, params byte[] commandParameters)
    //{
    //    Span<byte> paramSpan = stackalloc byte[commandParameters.Length];
    //    for (int i = 0; i < commandParameters.Length; paramSpan[i] = commandParameters[i], i++)
    //    {
    //    }

    //    SendCommand(command, paramSpan);
    //}

    ///// <summary>
    ///// Send a command to the the display controller along with parameters.
    ///// </summary>
    ///// <param name="command">Command to send.</param>
    ///// <param name="data">Span to send as parameters for the command.</param>
    //private void SendCommand(Command command, Span<byte> data)
    //{
    //    Span<byte> commandSpan = stackalloc byte[]
    //    {
    //            (byte)command
    //        };

    //    SendSPI(commandSpan, true);

    //    if (data != null && data.Length > 0)
    //    {
    //        SendSPI(data);

    //        // detect certain commands that may alter the state of the device. This is done as the
    //        // SPI device cannot read registers from the ssd1351 and so changes need to be captured
    //        switch (command)
    //        {
    //            // capture changes to the colour depth and colour sequence
    //            case Command.SetRemap:
    //                _colorSequence = (ColorSequence)((data[0] >> 2) & 0x01);
    //                _colorDepth = (ColorDepth)((data[0] >> 6) & 0x03);
    //                break;
    //        }
    //    }
    //}

    //private static readonly byte[][] font6x8 = new byte[][]
    //{
    //    new byte[] {0x00, 0x00, 0x00, 0x00, 0x00, 0x00},// sp // ASCII 32
    //    new byte[] {0x00, 0x00, 0x00, 0x2f, 0x00, 0x00},// !
    //    new byte[] {0x00, 0x00, 0x07, 0x00, 0x07, 0x00},// "
    //    new byte[] {0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14},// #
    //    new byte[] {0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12},// $
    //    new byte[] {0x00, 0x62, 0x64, 0x08, 0x13, 0x23},// %
    //    new byte[] {0x00, 0x36, 0x49, 0x55, 0x22, 0x50},// &
    //    new byte[] {0x00, 0x00, 0x05, 0x03, 0x00, 0x00},// '
    //    new byte[] {0x00, 0x00, 0x1c, 0x22, 0x41, 0x00},// (
    //    new byte[] {0x00, 0x00, 0x41, 0x22, 0x1c, 0x00},// )
    //    new byte[] {0x00, 0x14, 0x08, 0x3E, 0x08, 0x14},// *
    //    new byte[] {0x00, 0x08, 0x08, 0x3E, 0x08, 0x08},// +
    //    new byte[] {0x00, 0x00, 0x00, 0xA0, 0x60, 0x00},// ,
    //    new byte[] {0x00, 0x08, 0x08, 0x08, 0x08, 0x08},// -
    //    new byte[] {0x00, 0x00, 0x60, 0x60, 0x00, 0x00},// .
    //    new byte[] {0x00, 0x20, 0x10, 0x08, 0x04, 0x02},// /
    //    new byte[] {0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E},// 0
    //    new byte[] {0x00, 0x00, 0x42, 0x7F, 0x40, 0x00},// 1
    //    new byte[] {0x00, 0x42, 0x61, 0x51, 0x49, 0x46},// 2
    //    new byte[] {0x00, 0x21, 0x41, 0x45, 0x4B, 0x31},// 3
    //    new byte[] {0x00, 0x18, 0x14, 0x12, 0x7F, 0x10},// 4
    //    new byte[] {0x00, 0x27, 0x45, 0x45, 0x45, 0x39},// 5
    //    new byte[] {0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30},// 6
    //    new byte[] {0x00, 0x01, 0x71, 0x09, 0x05, 0x03},// 7
    //    new byte[] {0x00, 0x36, 0x49, 0x49, 0x49, 0x36},// 8
    //    new byte[] {0x00, 0x06, 0x49, 0x49, 0x29, 0x1E},// 9
    //    new byte[] {0x00, 0x00, 0x36, 0x36, 0x00, 0x00},// :
    //    new byte[] {0x00, 0x00, 0x56, 0x36, 0x00, 0x00},// ;
    //    new byte[] {0x00, 0x08, 0x14, 0x22, 0x41, 0x00},// <
    //    new byte[] {0x00, 0x14, 0x14, 0x14, 0x14, 0x14},// =
    //    new byte[] {0x00, 0x00, 0x41, 0x22, 0x14, 0x08},// >
    //    new byte[] {0x00, 0x02, 0x01, 0x51, 0x09, 0x06},// ?
    //    new byte[] {0x00, 0x32, 0x49, 0x59, 0x51, 0x3E},// @
    //    new byte[] {0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C},// A
    //    new byte[] {0x00, 0x7F, 0x49, 0x49, 0x49, 0x36},// B
    //    new byte[] {0x00, 0x3E, 0x41, 0x41, 0x41, 0x22},// C
    //    new byte[] {0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C},// D
    //    new byte[] {0x00, 0x7F, 0x49, 0x49, 0x49, 0x41},// E
    //    new byte[] {0x00, 0x7F, 0x09, 0x09, 0x09, 0x01},// F
    //    new byte[] {0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A},// G
    //    new byte[] {0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F},// H
    //    new byte[] {0x00, 0x00, 0x41, 0x7F, 0x41, 0x00},// I
    //    new byte[] {0x00, 0x20, 0x40, 0x41, 0x3F, 0x01},// J
    //    new byte[] {0x00, 0x7F, 0x08, 0x14, 0x22, 0x41},// K
    //    new byte[] {0x00, 0x7F, 0x40, 0x40, 0x40, 0x40},// L
    //    new byte[] {0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F},// M
    //    new byte[] {0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F},// N
    //    new byte[] {0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E},// O
    //    new byte[] {0x00, 0x7F, 0x09, 0x09, 0x09, 0x06},// P
    //    new byte[] {0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E},// Q
    //    new byte[] {0x00, 0x7F, 0x09, 0x19, 0x29, 0x46},// R
    //    new byte[] {0x00, 0x46, 0x49, 0x49, 0x49, 0x31},// S
    //    new byte[] {0x00, 0x01, 0x01, 0x7F, 0x01, 0x01},// T
    //    new byte[] {0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F},// U
    //    new byte[] {0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F},// V
    //    new byte[] {0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F},// W
    //    new byte[] {0x00, 0x63, 0x14, 0x08, 0x14, 0x63},// X
    //    new byte[] {0x00, 0x07, 0x08, 0x70, 0x08, 0x07},// Y
    //    new byte[] {0x00, 0x61, 0x51, 0x49, 0x45, 0x43},// Z
    //    new byte[] {0x00, 0x00, 0x7F, 0x41, 0x41, 0x00},// [
    //    new byte[] {0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55},// 55
    //    new byte[] {0x00, 0x00, 0x41, 0x41, 0x7F, 0x00},// ]
    //    new byte[] {0x00, 0x04, 0x02, 0x01, 0x02, 0x04},// ^
    //    new byte[] {0x00, 0x40, 0x40, 0x40, 0x40, 0x40},// _
    //    new byte[] {0x00, 0x00, 0x01, 0x02, 0x04, 0x00},// '
    //    new byte[] {0x00, 0x20, 0x54, 0x54, 0x54, 0x78},// a
    //    new byte[] {0x00, 0x7F, 0x48, 0x44, 0x44, 0x38},// b
    //    new byte[] {0x00, 0x38, 0x44, 0x44, 0x44, 0x20},// c
    //    new byte[] {0x00, 0x38, 0x44, 0x44, 0x48, 0x7F},// d
    //    new byte[] {0x00, 0x38, 0x54, 0x54, 0x54, 0x18},// e
    //    new byte[] {0x00, 0x08, 0x7E, 0x09, 0x01, 0x02},// f
    //    new byte[] {0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C},// g
    //    new byte[] {0x00, 0x7F, 0x08, 0x04, 0x04, 0x78},// h
    //    new byte[] {0x00, 0x00, 0x44, 0x7D, 0x40, 0x00},// i
    //    new byte[] {0x00, 0x40, 0x80, 0x84, 0x7D, 0x00},// j
    //    new byte[] {0x00, 0x7F, 0x10, 0x28, 0x44, 0x00},// k
    //    new byte[] {0x00, 0x00, 0x41, 0x7F, 0x40, 0x00},// l
    //    new byte[] {0x00, 0x7C, 0x04, 0x18, 0x04, 0x78},// m
    //    new byte[] {0x00, 0x7C, 0x08, 0x04, 0x04, 0x78},// n
    //    new byte[] {0x00, 0x38, 0x44, 0x44, 0x44, 0x38},// o
    //    new byte[] {0x00, 0xFC, 0x24, 0x24, 0x24, 0x18},// p
    //    new byte[] {0x00, 0x18, 0x24, 0x24, 0x18, 0xFC},// q
    //    new byte[] {0x00, 0x7C, 0x08, 0x04, 0x04, 0x08},// r
    //    new byte[] {0x00, 0x48, 0x54, 0x54, 0x54, 0x20},// s
    //    new byte[] {0x00, 0x04, 0x3F, 0x44, 0x40, 0x20},// t
    //    new byte[] {0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C},// u
    //    new byte[] {0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C},// v
    //    new byte[] {0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C},// w
    //    new byte[] {0x00, 0x44, 0x28, 0x10, 0x28, 0x44},// x
    //    new byte[] {0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C},// y
    //    new byte[] {0x00, 0x44, 0x64, 0x54, 0x4C, 0x44},// z
    //    new byte[] {0x14, 0x14, 0x14, 0x14, 0x14, 0x14}// horiz lines
    //};

    //private static readonly byte[][] font8x16 = new byte[][]
    //{
    //    new byte[] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},// 0
    //    new byte[] {0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00},//! 1
    //    new byte[] {0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//" 2
    //    new byte[] {0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00},//# 3
    //    new byte[] {0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00},//$ 4
    //    new byte[] {0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00},//% 5
    //    new byte[] {0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10},//& 6
    //    new byte[] {0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//' 7
    //    new byte[] {0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00},//( 8
    //    new byte[] {0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00},//) 9
    //    new byte[] {0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00},//* 10
    //    new byte[] {0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00},//+ 11
    //    new byte[] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00},//, 12
    //    new byte[] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01},//- 13
    //    new byte[] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00},//. 14
    //    new byte[] {0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00},/// 15
    //    new byte[] {0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00},//0 16
    //    new byte[] {0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00},//1 17
    //    new byte[] {0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00},//2 18
    //    new byte[] {0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00},//3 19
    //    new byte[] {0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00},//4 20
    //    new byte[] {0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00},//5 21
    //    new byte[] {0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00},//6 22
    //    new byte[] {0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00},//7 23
    //    new byte[] {0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00},//8 24
    //    new byte[] {0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00},//9 25
    //    new byte[] {0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00},//: 26
    //    new byte[] {0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00},//; 27
    //    new byte[] {0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00},//< 28
    //    new byte[] {0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00},//= 29
    //    new byte[] {0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00},//> 30
    //    new byte[] {0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00},//? 31
    //    new byte[] {0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00},//@ 32
    //    new byte[] {0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20},//A 33
    //    new byte[] {0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00},//B 34
    //    new byte[] {0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00},//C 35
    //    new byte[] {0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00},//D 36
    //    new byte[] {0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00},//E 37
    //    new byte[] {0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00},//F 38
    //    new byte[] {0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00},//G 39
    //    new byte[] {0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20},//H 40
    //    new byte[] {0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00},//I 41
    //    new byte[] {0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00},//J 42
    //    new byte[] {0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00},//K 43
    //    new byte[] {0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00},//L 44
    //    new byte[] {0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00},//M 45
    //    new byte[] {0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00},//N 46
    //    new byte[] {0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00},//O 47
    //    new byte[] {0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00},//P 48
    //    new byte[] {0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00},//Q 49
    //    new byte[] {0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20},//R 50
    //    new byte[] {0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00},//S 51
    //    new byte[] {0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00},//T 52
    //    new byte[] {0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00},//U 53
    //    new byte[] {0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00},//V 54
    //    new byte[] {0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00},//W 55
    //    new byte[] {0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20},//X 56
    //    new byte[] {0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00},//Y 57
    //    new byte[] {0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00},//Z 58
    //    new byte[] {0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00},//[ 59
    //    new byte[] {0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00},//\ 60
    //    new byte[] {0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00},//] 61
    //    new byte[] {0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//^ 62
    //    new byte[] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80},//_ 63
    //    new byte[] {0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},//` 64
    //    new byte[] {0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20},//a 65
    //    new byte[] {0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00},//b 66
    //    new byte[] {0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00},//c 67
    //    new byte[] {0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20},//d 68
    //    new byte[] {0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00},//e 69
    //    new byte[] {0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00},//f 70
    //    new byte[] {0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00},//g 71
    //    new byte[] {0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20},//h 72
    //    new byte[] {0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00},//i 73
    //    new byte[] {0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00},//j 74
    //    new byte[] {0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00},//k 75
    //    new byte[] {0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00},//l 76
    //    new byte[] {0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F},//m 77
    //    new byte[] {0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20},//n 78
    //    new byte[] {0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00},//o 79
    //    new byte[] {0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00},//p 80
    //    new byte[] {0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80},//q 81
    //    new byte[] {0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00},//r 82
    //    new byte[] {0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00},//s 83
    //    new byte[] {0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00},//t 84
    //    new byte[] {0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20},//u 85
    //    new byte[] {0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00},//v 86
    //    new byte[] {0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00},//w 87
    //    new byte[] {0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00},//x 88
    //    new byte[] {0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00},//y 89
    //    new byte[] {0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00},//z 90
    //    new byte[] {0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40},//{ 91
    //    new byte[] {0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00},//| 92
    //    new byte[] {0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00},//} 93
    //    new byte[] {0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}//~ 94
    //};
}
